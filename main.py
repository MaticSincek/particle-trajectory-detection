import random
from decimal import *
import math
from PIL import Image, ImageDraw
import numpy as np
import sys

random.seed(5)

def draw_point(image, xy, size, color):
    if size % 2 != 1:
        width = int(size / 2) + 1
    else:
        width = size / 2
    bbox = [(xy[0] - width, xy[1] - width), (xy[0] + width, xy[1] + width)]
    image.ellipse(bbox, fill= color)

def draw_concentric(image, origin, r, w):
    bbox = [(origin[0] - r, origin[1] - r), (origin[0] + r, origin[1] + r)]
    image.ellipse(bbox, outline = 'gray', width = w)

def circle_from_points(p1, p2, p3):
    """
    Returns the center and radius of the circle passing the given 3 points.
    In case the 3 points form a line, returns (None, infinity).
    """
    temp = p2[0] * p2[0] + p2[1] * p2[1]
    bc = (p1[0] * p1[0] + p1[1] * p1[1] - temp) / 2
    cd = (temp - p3[0] * p3[0] - p3[1] * p3[1]) / 2
    det = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])

    # colinear, return none
    if abs(det) < 1.0e-6:
        return (None, np.inf)

    # center of circle
    cx = (bc*(p2[1] - p3[1]) - cd*(p1[1] - p2[1])) / det
    cy = ((p1[0] - p2[0]) * cd - (p2[0] - p3[0]) * bc) / det

    radius = np.sqrt((cx - p1[0])**2 + (cy - p1[1])**2)
    return ((cx, cy), radius)

def angle_of_point_relative_to_origin(x, y):
    angle_rad = math.atan2(y, x)
    angle_rad = (angle_rad + 2 * math.pi) % (2 * math.pi)
    return angle_rad

def get_orientation(p1, p2, p3):
	val = (float(p2[1] - p1[1]) * (p3[0] - p2[0])) - \
		(float(p2[0] - p1[0]) * (p3[1] - p2[1]))
	if (val > 0):
		# clockwise orientation
		return 1
	elif (val < 0):
		# anti-clockwise orientation
		return 0
	else:
		# collinear orientation
		return 0
    
def cartesian2polar(p):
    x,y = p
    angle = angle_of_point_relative_to_origin(x, y)
    distance = math.sqrt(x ** 2 + y ** 2)
    return (distance, angle)

def polar2cartesian(distance, angle):
    x = distance * math.cos(angle)
    y = distance * math.sin(angle)
    return (x,y)

def centralize_point_on_sensor(p, sensor_segment_angle, layer_list, layer):
    distance, angle = cartesian2polar(p)
    new_angle = (int(angle / sensor_segment_angle) * sensor_segment_angle) + sensor_segment_angle / 2
    new_distance = layer_list[layer]
    return polar2cartesian(new_distance, new_angle)

def random_point_on_sensor(p, sensor_segment_angle):
    distance, angle = cartesian2polar(p)
    a_min = int(angle / sensor_segment_angle) * sensor_segment_angle
    a_max = (int(angle / sensor_segment_angle) + 1) * sensor_segment_angle
    a_delta = a_max - a_min
    a = a_min + random.random() * a_delta
    return polar2cartesian(distance, a)

def scale_for_drawing (x):
    return W/2 / 10000 * x


W = 1500
H = 1500
realW = 20000
realH = 20000
N_CONCENTRIC = 23
N_TRAJECTORIES = 100
SENSOR_DENSITY = 3600
N_SEED_CORRECTIONS = 30 ** 2 * 5
TOLERANCE = 50 ** 2
CENTER_TOLERANCE = 10
TRAJECTORY_ANGLE_TOLERANCE = math.pi / 4 # originally 50deg, now 45deg
SEED_ANGLE_TOLERANCE = math.pi / 18 # 10deg
MIN_PERC_COVERAGE_FOR_TRAJ = 0.9
DETECTION_FAIL_RATE = 0
WITH_SENSORS = True

# trajectory info
# radius of trajectory
radii = []
# angle of trajectory center from origin; absolete if we have the center point
angles = []
# negative or positive magnetic effect
directions = []
# center of circle the curve is based on
centers = []
# list of points where the particle colided with the sensors
detections = []

origin = (W/2, H/2)

# minimum and maximum radius of the trajectories
rmin = realW * 2 / 3 / 2
rmax = realW * 2 / 3

img = Image.new("RGB", (W, H))
canvas = ImageDraw.Draw(img)

draw_point(canvas, origin, 6, "white")

layer_radii = [400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000]

# detector layer drawing and sensor generation
for r in layer_radii:
    draw_concentric(canvas, origin, scale_for_drawing(r), 3)

# generation of arcs
for i in range(N_TRAJECTORIES):
    angle = random.uniform(0, 2 * math.pi)
    r = radius = random.uniform(rmin, rmax)
    dir = random.randint(0,1)

    # we should always only draw half of the circle
    angledeg = math.degrees(angle)
    if dir == 1:
        astart = angledeg
        aend = (angledeg + 180) % 360
    else:
        astart = (360 + angledeg - 180) % 360
        aend = angledeg

    # points r away from the origin with an angle "angle" relative to the origin 
    x = r * math.cos(angle)
    y = r * math.sin(angle)

    radii.append(r)
    angles.append(angle)
    directions.append(dir)
    centers.append((x,y))

    x_draw = scale_for_drawing(x)
    y_draw = scale_for_drawing(y)
    r_draw = scale_for_drawing(r)

    # center of bbox is in (x,y) with corners r away from the center in both directions
    bbox = [(x_draw - r_draw + origin[0], y_draw - r_draw + origin[1]), (x_draw + r_draw + origin[0], y_draw + r_draw + origin[1])]

    canvas.arc(
        bbox, 
        start = astart, 
        end = aend, 
        fill = (
            random.randint(50,200), 
            random.randint(50,200), 
            random.randint(50,200)
            ),
        width = 5)

    # we already have the trajectory now let's see where it intersects each concentric circle
    detection = []
    for radius in layer_radii:
        d = math.sqrt(x ** 2 + y ** 2)
        a = (radius ** 2 - r ** 2 + d ** 2) / (2 * d)
        h = math.sqrt(radius ** 2 - a ** 2)
        x2 = a * x / d   
        y2 = a * y / d

        if dir == 0:  
            x3 = x2 + h * y / d
            y3 = y2 - h * x / d
        else:
            x3 = x2 - h * y / d
            y3 = y2 + h * x / d

        detection.append((x3,y3))

        if not WITH_SENSORS:
            x3_real = scale_for_drawing(x3) + origin[0]
            y3_real = scale_for_drawing(y3) + origin[1]
            draw_point(canvas, (x3_real,y3_real), 7, "red")

    detections.append(detection)

# sorting detections by layer
detections_on_layer = [[] for _ in layer_radii]

for i in range(N_TRAJECTORIES):
    for lr in range(len(layer_radii)):
        detections_on_layer[lr].append(detections[i][lr])

#determine the angle span of sensors
segment_angle = 2 * math.pi / SENSOR_DENSITY

#centralize points on sensors
if WITH_SENSORS:
    for i in range(len(detections_on_layer)):
        for j in range(len(detections_on_layer[i])):
            p = centralize_point_on_sensor(detections_on_layer[i][j], segment_angle, layer_radii, i)
            detections_on_layer[i][j] = (float(p[0]), float(p[1]))

# remove points that translated to the same sensor to avoid duplicate trajectories
for i in range(len(detections_on_layer)):
    detections_on_layer[i] = list(dict.fromkeys(detections_on_layer[i]))

marked_for_deletion = []

#delete some points to simulate the real environment whene not every point on trajectory is detected
#important that we start from the back of the rows for deleting - otherwise we can get indexes that can't be deleted
if WITH_SENSORS:
    for i in range(len(detections_on_layer)-1, -1, -1):
        for j in range(len(detections_on_layer[i])-1, -1, -1):
            chance = random.random()
            if chance <= DETECTION_FAIL_RATE:
                marked_for_deletion.append((i,j))
            else:
                x_draw = scale_for_drawing(detections_on_layer[i][j][0]) + origin[0]
                y_draw = scale_for_drawing(detections_on_layer[i][j][1]) + origin[1]
                draw_point(canvas, (x_draw, y_draw), 6, "yellow")
                
for (i,j) in marked_for_deletion:
    del detections_on_layer[i][j]
              
# radius of trajectory
trajectory_radii = []
# negative or positive magnetic effect
trajectory_directions = []
# center of circle the curve is based on
trajectory_centers = []
# points used in trajectory
trajectory_points = []

# number of points we need to find on the seed trajectory for us to count it as an actual trajectory
points_needed = int(N_CONCENTRIC * MIN_PERC_COVERAGE_FOR_TRAJ)

# finding the trajectories from points by combinatorics
for p0 in detections_on_layer[N_CONCENTRIC-1]:
    for p1 in detections_on_layer[N_CONCENTRIC-2]:
        for p2 in detections_on_layer[N_CONCENTRIC-3]:

            # p0 = actual sensor; pp0 = randomly generated point in sensor space

            r_best = None
            pp0_best = None
            pp1_best = None
            pp2_best = None
            center_best = None

            min_avg_error = sys.float_info.max

            angle_p0 = angle_reference = angle_of_point_relative_to_origin(p0[0], p0[1])
            angle_p1 = angle_of_point_relative_to_origin(p1[0], p1[1])
            angle_p2 = angle_of_point_relative_to_origin(p2[0], p2[1])

            # if both points are roughly in the same direction from the origin we continue
            if (abs(angle_p0 - angle_p1) < SEED_ANGLE_TOLERANCE or \
               abs(angle_p0 - angle_p1) > (2 * math.pi - SEED_ANGLE_TOLERANCE)) and \
               (abs(angle_p0 - angle_p2) < SEED_ANGLE_TOLERANCE or \
               abs(angle_p0 - angle_p2) > (2 * math.pi - SEED_ANGLE_TOLERANCE)):
                
                # we generate random points in sensos space and figure out which one fits best
                for _ in range(N_SEED_CORRECTIONS):
                    pp0 = random_point_on_sensor(p0, segment_angle)
                    pp1 = random_point_on_sensor(p1, segment_angle)
                    pp2 = random_point_on_sensor(p2, segment_angle)

                    # find the r and center of these 3 points
                    (center, r) = circle_from_points(pp0, pp1, pp2)

                    if center == None:
                        continue

                    # check if point goes roughly through the center
                    distance_center_origin = math.sqrt(center[0] ** 2 + center[1] ** 2)
                    center_error = abs(distance_center_origin-r)
                    
                    if center_error > CENTER_TOLERANCE:
                        continue
                    
                    # variables that hold how many points we found and cumulative distance of points to sensor centers
                    points_on_seed_trajectory = 0
                    cumul_error = 0
                    
                    # if r makes sense it could be a trajectory
                    if r < rmax and r > rmin:

                        # check how the seed is supported by points by goung through all the layers and finding the best fit on every layer
                        for layer in range(N_CONCENTRIC-1, -1, -1):
                            min_error = sys.float_info.max

                            for det in range(len(detections_on_layer[layer])):
                                p = detections_on_layer[layer][det]

                                # calculate distance from the seed center to point to see if it is on the trajectory
                                distance_center_current_point = math.sqrt((center[0] - p[0]) ** 2 + (center[1] - p[1]) ** 2)

                                # if distance from the seed center to point is approx. the same as r 
                                # and the angle from origin is similar it is on the trajectory of seed s
                                error = abs(distance_center_current_point-r) ** 2
                                if error < TOLERANCE:
                                    detection_angle = angle_of_point_relative_to_origin(p[0], p[1])

                                    if (abs(angle_reference - detection_angle) < TRAJECTORY_ANGLE_TOLERANCE) or \
                                        abs(angle_reference - detection_angle) > (2 * math.pi - TRAJECTORY_ANGLE_TOLERANCE):

                                        # if it's the best fit as of now save the error as minimal
                                        if error < min_error:
                                            min_error = error

                            # if we ever found a point that is close, then means we found the closest one then add it to the cumulative
                            if (min_error < sys.float_info.max):
                                cumul_error += min_error
                                points_on_seed_trajectory += 1

                    # calculate the average aquared error. If it has at least the amount of points we need and the lowest error yes, save it as the best
                    if points_on_seed_trajectory >= points_needed:
                        avg_err = cumul_error / points_on_seed_trajectory
                        if avg_err < min_avg_error:
                            min_avg_error = avg_err
                            r_best = r
                            pp0_best = pp0
                            pp1_best = pp1
                            pp2_best = pp2
                            center_best = center

            # if we found at least one trajectory we can be sure its the best one and we can save it
            if center_best != None:
                o = get_orientation(pp2_best, pp1_best, pp0_best) 
                trajectory_radii.append(r_best)
                trajectory_centers.append(center_best)
                trajectory_directions.append(o)
                trajectory_points.append((pp0_best, pp1_best, pp2_best))

print("Found " + str(len(trajectory_radii)) + " out of " + str(N_TRAJECTORIES) + " trajectories." )

# draw the trajectories
for i in range(len(trajectory_radii)):
    r = trajectory_radii[i]
    dir = trajectory_directions[i]
    center = trajectory_centers[i]
    angle = angle_of_point_relative_to_origin(center[0], center[1])

    # we should always only draw half of the circle
    angledeg = math.degrees(angle)
    if dir == 1:
        astart = angledeg
        aend = (angledeg + 180) % 360
    else:
        astart = (360 + angledeg - 180) % 360
        aend = angledeg

    r_draw = scale_for_drawing(r)
    center_draw = (scale_for_drawing(center[0]) + origin[0], scale_for_drawing(center[1]) + origin[1])

    # calculate bbox from center and r
    bbox = [(center_draw[0] - r_draw, center_draw[1] - r_draw), (center_draw[0] + r_draw, center_draw[1] + r_draw)]

    canvas.arc(
        bbox, 
        start = astart, 
        end = aend, 
        fill = (255, 255, 255),
        width = 2)
    
for layer in detections_on_layer:
    print("{ ", end = "")
    for detection in layer:
        print(str(detection[0]) + ", ", end = "")
    print("}, ")
    
print("")

for layer in detections_on_layer:
    print("{ ", end = "")
    for detection in layer:
        print(str(detection[1]) + ", ", end = "")
    print("}, ")

for a in range(len(trajectory_radii)):
    print(trajectory_radii[a])
    print(trajectory_centers[a])
    print()

# PRINT PASTED POINTS
# pnts = [(375.554083, -467.930690), (446.936434, -400.309660), (553.724703, 231.060497), (552.507288, 233.956613), (599.615995, -21.462970), (576.901121, 164.879035), (540.873070, 259.723549), (574.843740, 171.914732), (506.316004, -321.938044), (596.981111, -60.112837), (507.436693, -320.168710), (537.194041, 267.249999), (547.914099, 244.520224), (591.155392, 102.641619), (539.963171, -261.609966), (521.955386, 295.909741), (577.188011, 163.871902), (315.728354, -510.211335), (581.538546, 147.691976), (471.837754, -370.633422), (498.299216, -334.212345), (529.029297, 283.068902), (522.985124, -294.085974), (554.127136, 230.093714), (322.821241, -505.753345), (508.323687, -617.743498), (604.225450, -524.320137), (741.485277, 300.332457), (739.902583, 304.210730), (799.268725, -34.198029), (771.090637, 213.117879), (724.158616, 339.991615), (764.015956, 237.233260), (671.316429, -435.125560), (795.245071, -87.093500), (672.074843, -433.953229), (711.851942, 365.057273), (733.369401, 319.639362), (786.982903, 143.728599), (716.879549, -355.082683), (699.357038, 388.458148), (768.039884, 223.863211), (412.628719, -685.374015), (778.382197, 184.719127), (624.780590, -499.649091), (658.905274, -453.700166), (701.381405, 384.791015), (694.559052, -396.973203), (733.926159, 318.358905), (435.125560, -671.316429), (644.790904, -764.359006), (765.483213, -643.455865), (930.097381, 367.313030), (928.809553, 370.557438), (998.674826, -51.464468), (966.151321, 257.976017), (909.599036, 415.487176), (951.862261, 306.526078), (835.327930, -549.751988), (993.068457, -117.537397), (834.367160, -551.209073), (884.173639, 467.158405), (920.163526, 391.534272), (982.450398, 186.524036), (892.192014, -451.656297), (878.400379, 477.925491), (958.072899, 286.524553), (505.280886, -862.954938), (976.106756, 217.291510), (775.495743, -631.352795), (817.647619, -575.719003), (871.641874, 490.143289), (863.835505, -503.773977), (911.762044, 410.718853), (551.209073, -834.367160), (784.897149, -907.709461), (929.271173, -759.246394), (1119.920803, 431.019019), (1119.166828, 432.972992), (1197.825232, -72.212975), (1162.559778, 297.413453), (1096.680065, 487.127123), (1138.320234, 379.772361), (996.598432, -668.424689), (1190.405940, -151.438763), (994.259123, -671.899395), (1053.077884, 575.349432), (1108.254272, 460.187428), (1176.942336, 234.108386), (1065.859977, -551.309813), (1059.045079, 564.290281), (1146.643263, 353.849160), (1174.854567, 244.370101), (923.948031, -765.715376), (973.888778, -701.099599), (1039.753688, 599.092872), (1032.356972, -611.750833), (1087.126366, 508.090804), (928.582736, -1047.728067), (1097.929298, -868.649099), (1311.768425, 489.145786), (1310.052995, 493.721733), (1396.674362, -96.440272), (1359.296051, 335.133178), (1285.341194, 554.885587), (1323.327745, 456.950411), (1155.848695, -789.945437), (1387.539646, -186.369874), (1151.696725, -795.986591), (1220.298623, 686.200605), (1297.599234, 525.581800), (1371.159164, 282.705759), (1237.843095, -654.021767), (1241.250561, 647.531500), (1334.835841, 422.153144), (1374.972698, 263.533831), (1071.676499, -900.838211), (1126.125889, -831.769488), (1198.142398, -724.192513), (1259.914065, 610.423254), (1075.786892, -1184.349004), (1268.514870, -975.125646), (1503.985171, 545.919963), (1503.030071, 548.544079), (1595.176676, -124.142546), (1556.764394, 369.438253), (1475.521555, 618.737539), (1506.822972, 538.037667), (1313.041368, -914.287901), (1583.840514, -226.824219), (1306.626488, -923.432304), (1488.155810, 587.700847), (1564.159900, 336.754816), (1387.730290, 796.369664), (1408.101277, -759.770224), (1426.243786, 725.140443), (1521.258378, 495.754928), (1575.449346, 279.212029), (1215.742281, -1040.178209), (1276.976037, -964.018776), (1363.494198, -837.187895), (1430.021045, 717.662742), (911.994820, -1314.635101), (0.000000, 0.000000), (1226.447773, -1317.507442), (1444.134357, -1074.465429), (1698.321895, 596.408199), (1697.278380, 599.371420), (1793.555023, -152.185348), (1755.616177, 397.255383), (1667.159929, 678.658803), (1688.744405, 623.010703), (1468.139406, -1041.425314), (1779.525919, -270.716650), (1458.995469, -1054.197430), (1681.007051, 643.595599), (1756.992161, 391.124719), (1568.955373, 882.257921), (1576.594687, -868.532782), (1611.582123, 801.749998), (1707.480350, 569.658541), (1777.095741, 286.235438), (1357.446192, -1182.091297), (1425.162401, -1099.505402), (1525.653597, -955.186423), (1595.893579, 832.540501), (1380.502480, -1447.139558), (1623.147964, -1168.499331), (1892.735340, 646.183359), (1991.287421, -186.478972), (1954.462213, 424.355344), (1860.194762, 734.626059), (1867.785612, 715.106221), (1621.106077, -1171.330478), (1975.102899, -314.592652), (1608.751271, -1188.242126), (1873.954892, 698.779695), (1948.346774, 451.602534), (1751.771874, 965.036425), (1743.283747, -980.286579), (1798.352510, 875.173268), (1891.604655, 649.485820), (1978.798876, 290.439340), (1496.754381, -1326.546766), (1568.470425, -1240.927285), (1687.720014, -1073.126812), (1760.126597, 949.712780), (1162.826369, -1627.216899), (1778.532577, -1756.935364), (2081.094996, -1385.295498), (2384.947507, 749.683525), (2386.252319, 745.519867), (2483.681722, -285.175564), (2454.483305, 474.880729), (2348.484485, 857.100124), (2310.532837, 954.692624), (1995.275058, -1506.279337), (2179.104684, 1225.358223), (2460.101744, -444.858864), (1971.369299, -1537.433930), (2361.657502, 820.105994), (2424.147630, 611.153230), (2216.518859, 1156.306251), (2150.743692, -1274.480902), (2270.357935, 1046.649344), (2485.140846, 272.167187), (1835.806274, -1697.001864), (1916.512723, -1605.297163), (2083.509622, -1381.661194), (1492.313096, -2005.742163), (0.000000, 0.000000), (2195.845737, -2044.079622), (2559.287417, -1565.262891), (2881.610357, 834.458957), (2884.505607, 824.395176), (2972.597692, -404.552791), (2957.550385, 502.887381), (2844.139181, 954.396312), (2741.700163, 1217.817808), (2355.950793, -1857.281848), (2652.520918, 1401.475216), (2940.294938, -595.538139), (2313.207620, -1910.254042), (2855.586782, 919.578234), (2894.361971, 789.093643), (2690.618225, 1326.866071), (2548.297541, -1583.091798), (2752.223098, 1193.845894), (2797.917069, 1082.432479), (2992.134030, 217.103545), (2159.837190, -2082.091091), (2245.131572, -1989.820149), (2467.921554, -1705.685552), (1836.651840, -2372.068721), (2635.463031, -2303.114112), (3056.716189, -1704.841968), (3384.660786, 891.106819), (3389.280193, 873.372642), (3457.385678, -544.503697), (3463.779854, 502.224177), (3346.172373, 1026.221443), (3157.732371, 1509.545055), (2698.742223, -2228.629716), (3136.348028, 1553.486739), (3415.041086, -766.481822), (2639.478707, -2298.510856), (3355.000319, 996.981876), (3358.459995, 985.264665), (3170.785233, 1481.931512), (2930.346418, -1913.914802), (3241.699862, 1319.614340), (3239.391764, 1325.270161), (3497.973157, 119.095727), (2468.386056, -2481.344450), (2553.480054, -2393.687451), (2840.508937, -2044.873830), (2195.492857, -2725.767986), (0.000000, 0.000000), (3093.148744, -2536.223737), (3565.609465, -1812.851108), (3891.910984, 923.595633), (3898.264002, 896.402682), (2092.969738, -3408.735495), (3937.399075, -704.903201), (3970.608499, 484.012549), (3853.587507, 1072.316802), (3559.259711, 1825.286364), (3030.259938, -2611.039010), (3626.704984, 1687.308793), (3883.703002, -957.523365), (2946.749970, -2704.933385), (3859.149295, 1052.124858), (3815.916012, 1199.493640), (3661.245916, 1610.986759), (3298.480630, -2262.747342), (3738.061725, 1423.690466), (3672.403412, 1585.387390), (3500.169801, 1936.184744), (3999.961923, -17.453237), (2761.004961, -2894.279117), (2835.822228, -2821.012635), (3196.641554, -2404.471413), (2568.475461, -3066.420357), (0.000000, 0.000000), (3562.906003, -2748.763506), (4086.644282, -1883.968819), (4402.478994, 931.761076), (4410.442408, 893.307208), (2480.440827, -3754.652222), (4410.442408, -893.307208), (4478.904802, 435.214633), (4365.379081, 1092.458458), (3949.042067, 2157.560371), (3341.522772, -3014.004905), (4128.334647, 1790.768841), (4345.648183, -1168.478441), (3228.834267, -3134.426467), (4367.279131, 1084.837774), (4263.703671, 1439.038223), (4155.953519, 1725.702856), (3656.666040, -2622.745407), (4240.574238, 1505.832039), (4096.452656, 1862.545472), (3993.360512, 2074.384685), (4495.886578, -192.363916), (3037.259496, -3320.399789), (3100.442949, -3261.480265), (3543.629344, -2773.570095), (2955.228244, -3393.615480), (0.000000, 0.000000), (4052.765192, -2928.326194), (4621.065675, -1909.385249), (4915.477513, 915.467539), (4924.794573, 863.943524), (2892.848093, -4078.165017), (4878.630122, -1094.974031), (4986.250925, 370.542451), (4880.533781, 1086.457552), (3641.854849, -3425.914952), (4637.552037, 1868.986652), (4800.249272, -1399.145070), (3488.952299, -3581.509717), (4878.630122, 1094.974031), (4705.880076, 1689.583590), (4660.039346, 1812.190191), (3995.801943, -3005.589266), (4748.495631, 1565.819032), (4507.275586, 2164.362908), (4495.881275, 2187.933171), (4983.542561, -405.343737), (3296.729076, -3759.199037), (2631.069618, -4251.761125), (3342.409177, -3718.642345), (3877.478716, -3156.763977), (3355.369298, -3706.952505), (4557.020980, -3079.538892), (5166.665868, -1885.620272), (5430.014765, 874.608284), (5440.294611, 808.204517), (3329.116934, -4378.011014), (5340.091627, -1316.594626), (5493.197202, 273.467556), (5398.031636, 1054.160547), (3919.511854, -3858.422842), (5153.375954, 1921.644160), (5246.884516, -1649.303755), (3733.404100, -4038.773802), (5394.319042, 1072.996771), (5139.834872, 1957.574390), (5169.949025, 1876.599872), (4319.243120, -3405.016721), (5261.077438, 1603.453831), (4911.384189, 2475.541426), (5010.740986, 2267.702532), (5460.739917, -655.987469), (3539.007256, -4210.157674), (3055.636282, -4573.082868), (3553.681888, -4197.778584), (4197.778584, -3553.681888), (5079.947197, -3192.825783), (5717.558624, -1819.209548), (5945.195384, 809.105582), (5955.912749, 726.018823), (3796.231971, -4646.355864), (5794.197578, -1557.971254), (5997.804604, 162.295823), (5918.575543, 985.121079), (4186.742759, -4297.811661), (5678.206019, 1938.550078), (5684.938228, -1918.717630), (3948.195621, -4517.936624), (5909.753488, 1036.732229), (5561.139574, 2252.493427), (5684.938228, 1918.717630), (4626.415240, -3820.508085), (5777.565140, 1618.561416), (5305.041836, 2802.950431), (5529.147777, 2329.919497), (5923.652471, -954.118128), (3755.540833, -4679.306899), (3496.993876, -4875.554720), (3739.184124, -4692.387675), (4497.202084, -3971.797253), (4194.237475, -4290.497874), (0.000000, 0.000000), (5720.411439, 3086.566534), (5609.207100, -3284.325761), (6271.117605, -1709.702894), (6460.121302, 718.910814), (6470.616493, 617.350949), (4285.747798, -4886.958749), (6237.139991, -1829.777235), (6499.977725, 17.016941), (6437.529430, 899.007695), (4428.839181, -4757.665763), (6204.256028, 1938.351654), (6113.801240, -2207.132619), (4138.883759, -5011.949843), (6427.762242, 966.370820), (5976.611995, 2555.407808), (4916.759578, -4251.526226), (6297.198799, 1610.989538), (5682.275937, 3156.222454), (6058.051150, 2355.847249), (6368.377276, -1301.449526), (3961.447935, -5153.341659), (3970.436175, -5146.419783), (3898.193912, -5201.354076), (4788.468701, -4395.516750), (4632.150373, -4559.954268), (0.000000, 0.000000), (6283.503202, 3085.058754), (6154.632243, -3334.741662), (6827.396244, -1544.882045), (6973.892635, 604.004561), (6983.371811, 482.201359), (4796.280932, -5098.596789), (6674.179206, -2110.765720), (6998.334190, -152.704195), (6957.053710, 774.211646), (4652.049757, -5230.528946), (6737.186655, 1900.083149), (6532.871352, -2514.277609), (4304.815003, -5519.834036), (6944.034648, 883.392784), (6377.306709, 2886.166858), (6727.145537, 1935.332769), (5189.733507, -4697.517018), (6819.213709, 1580.608868), (6592.350502, 2353.914795), (6793.545314, -1687.525426), (4149.013809, -5637.879425), (4466.673026, -5389.696845), (4030.033023, -5723.533335), (6077.391701, 3473.515526), (5056.547734, -4840.591390), (5081.823582, -4814.049136), (0.000000, 0.000000), (0.000000, 0.000000), (6854.250408, 3044.544521), (6709.084799, -3352.339655), (7380.305232, -1334.576591), (7486.407699, 451.331096), (7493.692448, 307.528041), (5326.390317, -5280.110433), (7097.757524, -2423.187598), (7491.979521, -346.760528), (7474.241269, 621.061556), (4865.881663, -5707.293197), (7269.231823, 1846.149698), (6936.586711, -2851.975595), (4434.822363, -6048.334532), (7460.941063, 764.433418), (6772.204743, 3222.924590), (7252.844542, 1909.514612), (5444.810981, -5157.909788), (7345.495523, 1514.495139), (6600.474737, 3561.422924), (6511.491109, 3721.623778), (7130.898645, 2323.851225), (7196.699990, -2111.281426), (4307.182972, -6139.883944), (4984.339025, -5604.138157), (4123.139913, -6264.959478), (6625.177109, 3515.256502), (5317.166678, -5289.398691), (5551.635956, -5042.751056), (7430.476423, 2964.459500), (7276.792290, -3323.897405), (7930.644626, -1051.130730), (7994.879927, 286.172931), (7999.314621, 104.716765), (5884.048970, -5420.144622), (7515.150353, -2742.720396), (7980.022371, -565.015887), (7987.912780, 439.601439), (5050.822364, -6203.965945), (7805.808196, 1751.958450), (7333.694008, -3196.393623), (4548.494806, -6581.124144), (7975.883381, 620.712732), (7150.105223, 3588.313712), (7780.586157, 1860.773778), (5681.483005, -5632.117796), (7869.829032, 1437.285989), (7181.146516, 3525.781433), (7092.860350, 3700.180002), (7672.537759, 2265.428069), (7566.418619, -2597.943280), (4456.164595, -6643.989547), (5532.104446, -5778.911696), (4197.831827, -6810.154767), (5552.242909, -5759.565841), (6938.651451, 3981.848319), (6023.915499, -5264.260828), (8019.853394, 2816.372052), (7844.433290, -3273.357048), (8469.565386, -718.653031), (8499.608379, 81.592889), (8499.064651, -126.095413), (6458.630869, -5525.946733), (7916.677949, -3094.545241), (8460.153514, -822.072085), (8497.278198, 215.088869), (5215.569064, -6711.768719), (8342.412528, 1629.157208), (7719.216978, -3558.607769), (4623.209071, -7132.737054), (8487.959604, 452.262941), (7522.394918, 3957.723423), (8312.709225, 1774.504254), (5888.568501, -6129.825528), (8396.508074, 1322.366122), (7768.150463, 3450.483791), (7687.868736, 3625.834289), (8216.100867, 2178.459672), (7905.827739, -3122.160751), (4573.300913, -7164.839060), (6098.909170, -5920.583327), (7743.872433, 3504.631185), (5780.691437, -6231.661617), (7487.571275, 4023.217171), (6506.607315, -5469.374850), (8609.035808, 2623.833542), (8427.295971, -3159.221836), (8994.239918, -321.944547), (8998.762901, -149.218814), (8991.773156, -384.727831), (7058.116913, -5584.172781), (8305.870542, -3465.907462), (8933.869123, -1089.028235), (8999.969158, -23.561918), (5347.089566, -7239.380717), (8877.863315, 1477.681619), (8085.700378, -3952.397930), (4668.959323, -7694.206836), (8996.268314, 259.145571), (7875.382052, 4356.415675), (8842.053580, 1678.716324), (6086.100115, -6630.187432), (8921.975205, 1182.522071), (8365.093944, 3320.422159), (8287.609321, 3509.349190), (8764.000253, 2047.510579), (8205.858392, -3696.469674), (6693.556221, -6016.336519), (8311.907038, 3451.405712), (5981.206830, -6724.965788), (8043.868376, 4036.852926), (7009.117679, -5645.553060)]
# for p in pnts:
#     x = scale_for_drawing(p[0]) + origin[0]
#     y = scale_for_drawing(p[1]) + origin[1]

#     draw_point(canvas, (x,y), 4, "red")

# PRINT PASTED TRAJECTORIES
trajs = "-8273.408626,-7993.611137,11500.272174,0,3.909792:10616.155324,-4206.475539,11425.787663,1,5.905930:-8318.506368,-8100.901459,11615.691326,0,3.913739:-8312.291546,-8080.852149,11591.316922,0,3.912874:10210.830676,-5905.855503,11798.927829,0,5.758806:-127.166863,-11987.508203,11989.079416,1,4.701781:-8357.223325,-8200.840255,11714.625219,0,3.917547:10254.964216,-5913.167294,11840.871537,0,5.760138:6013.619018,-4291.330040,7388.507154,1,5.663389:10206.339498,-5911.859407,11796.862495,0,5.758175:4667.315591,4790.660498,6693.681863,0,0.798439:5934.937555,-6163.407881,8551.663766,0,5.478905:-9003.046435,-2879.633024,9450.465800,1,3.451160:6691.083388,5028.933666,8375.893082,0,0.644516:9418.062248,5201.574204,10765.070802,1,0.504606:6018.642640,-4302.009150,7397.834364,1,5.662608:7354.287796,9967.835451,12389.916167,1,0.935148:-11140.747681,6619.651994,12961.110712,1,2.605461:-11222.884194,6704.994217,13076.488638,1,2.603058:5929.856183,-6164.543322,8548.772597,0,5.478385:-8982.661768,-2880.835345,9433.976463,1,3.451940:9364.667590,5198.557762,10713.251085,1,0.506769:10540.285874,-4134.363232,11328.427310,1,5.909383:-10122.856077,533.877961,10135.298272,1,3.088902:-11226.361670,6717.196879,13087.350772,1,2.602394:2561.322413,9693.535150,10024.238541,1,1.312470:-1974.635785,-6774.812562,7059.785203,0,4.428779:9178.273871,-4746.638145,10332.176133,1,5.805904:-8970.464296,-2879.103147,9417.156548,1,3.452160:-9038.075290,-2869.607100,9481.640308,1,3.449028:-5080.805930,7773.462378,9291.077150,1,2.149705:-11055.255850,6514.886680,12829.620608,1,2.609076:-11182.014667,6653.515310,13013.897483,1,2.604843:-5041.318468,7501.774669,9045.537444,1,2.162494:7535.571836,2276.333431,7871.701552,0,0.293362:-11120.997178,6600.436930,12935.050983,1,2.605958:2602.274683,9739.883330,10082.950886,1,1.309717:-5918.667412,-9990.617809,11603.414840,1,4.177560:9218.311829,5188.129870,10580.450271,1,0.512623:9549.920684,-1431.068430,9653.229583,1,6.134441:7540.116572,2276.675209,7875.130687,0,0.293237:4670.914254,4779.329038,6681.269784,0,0.796870:-9284.172359,-5625.542801,10859.180188,0,3.686360:4339.092833,-9607.093172,10542.768431,1,5.136618:9887.444783,-1654.148728,10020.751220,1,6.117423:-9014.565526,1979.817141,9232.079768,0,2.925401:-10866.974792,5119.787320,12011.023827,1,2.701304:-8118.218013,-8683.012005,11887.217103,0,3.960594:-915.573574,-12129.635628,12161.236132,1,4.637049:-6091.425951,-10092.667460,11794.957671,1,4.169364:4669.207824,4785.605591,6687.179998,0,0.797708:2827.372261,-8430.275572,8887.751890,0,5.035983:7308.565868,9937.956516,12337.156551,1,0.936692:-1257.410628,13056.946487,13114.333699,1,1.666802:-8123.315140,-8682.690256,11888.477663,0,3.960263:9763.908745,-2724.998186,10140.397539,0,6.011022:-1982.237530,-6754.162550,7038.978496,0,4.426921:2907.706813,-8511.204291,8990.089259,0,5.041590:10477.331346,-2695.223739,10820.379136,1,6.031401:-10897.724219,5146.375779,12050.987522,1,2.700396:9375.180726,31.530255,9379.644984,1,0.003363:-2409.399795,9737.694043,10034.676211,1,1.813355:-10095.276084,527.383596,10112.841216,1,3.089399:-1223.256754,13151.717300,13212.365100,1,1.663541:-4824.379752,-8193.342568,9508.730544,1,4.180233:-1973.432831,8600.251797,8823.492601,0,1.796354:-5039.980853,7495.050860,9039.461577,1,2.162786:-5078.615074,7770.368182,9289.083097,1,2.149689:9150.201816,-4715.855684,10295.185533,1,5.807307:2921.356201,-8528.428866,9007.438643,0,5.042405:13149.063564,-1117.254549,13198.093525,0,6.198421:9767.160913,-2730.549736,10140.697869,0,6.010581:-3241.965237,7198.592497,7889.294713,0,1.993950:-13022.588464,-1009.543099,13065.122958,1,3.218960:-10103.358675,530.174371,10119.721420,1,3.089166:-2427.481199,9690.945081,9985.074833,1,1.816236:13165.834815,-1121.814530,13211.159856,0,6.198184:-4725.589435,-10441.357541,11462.115949,1,4.287388:-5080.476035,7721.841651,9242.260020,1,2.152730:-12430.984530,-1465.876211,12519.654453,0,3.258972:7217.645823,9892.331262,12238.608018,1,0.940466:-4829.491737,-8194.638736,9515.969774,1,4.179839:-10607.548115,-3682.060147,11228.338544,0,3.475697:-4857.292644,4946.863257,6936.047530,1,2.347059:-4850.028726,4909.507056,6900.346757,1,2.350100:2828.717758,-8426.033492,8885.234559,0,5.036278:9550.853528,-1439.086635,9656.275734,1,6.133634:11313.150390,-130.380174,11312.525490,0,6.271661:-12997.977080,-1019.618419,13040.099112,1,3.219877:-8751.421125,5599.988174,10389.068976,1,2.572354:7137.339253,1986.235064,7414.908695,1,0.271420:-7416.273546,1092.320416,7498.613958,1,2.995357:11299.878467,-140.803092,11296.689678,0,6.270725:9430.619077,6111.422654,11234.309550,1,0.574996:-6848.503484,-4595.261614,8248.289820,1,3.732581:-9024.826857,1982.235933,9237.631294,0,2.925383:-9257.835838,-2268.042416,9535.645611,0,3.381847:4115.827695,-8935.444024,9837.351343,1,5.144038:6386.666259,8707.245076,10801.739279,1,0.937946:9363.169092,41.619719,9361.896256,1,0.004445:-4856.849129,4939.580314,6929.434218,1,2.347750:-4851.629107,4939.153645,6925.657197,1,2.347255:-7421.806992,1100.184194,7508.047023,1,2.994428:-1489.009735,7015.543848,7167.271747,1,1.779937:-1458.579635,7100.448264,7244.953076,1,1.773399:-6032.302442,-11392.107145,12885.566831,1,4.225408:-7106.474584,-9591.447660,11929.236865,1,4.074726:-7408.944910,1091.827039,7492.904473,1,2.995280:-7443.644458,3416.623573,8190.597036,1,2.711281:-1434.755404,7131.956576,7283.661889,1,1.769319:6927.914800,8338.231419,10842.910329,1,0.877519:-10858.879737,5118.161191,12001.604134,1,2.701140:-7161.950814,-9611.651674,11990.197129,1,4.072011:2842.491627,-8447.398294,8908.644709,0,5.036981:-7598.522323,4469.161968,8811.595223,1,2.609923:-8546.757036,-5816.782432,10329.011400,0,3.739168:-1484.623271,7030.031989,7178.739552,1,1.778921:-1431.113619,7135.554767,7284.968310,1,1.768731:-8772.432701,5621.658876,10419.589223,1,2.571689:-8797.887823,-5813.866816,10546.447570,0,3.725540:-7415.390669,1098.092939,7500.586183,1,2.994578:-8563.267451,-5858.064817,10372.131282,0,3.741562:-7442.360630,3417.117775,8191.005327,1,2.711160:12363.811108,-3071.564893,12738.866423,1,6.039683:-8805.474830,5676.387986,10481.593732,1,2.568993:-9836.015195,-4997.932008,11029.577592,1,3.611720:-9258.329244,-5582.054915,10810.013087,0,3.684158:-12322.387971,-1405.384190,12402.230511,0,3.255153:-1428.499751,7157.999019,7304.296958,1,1.767775:7711.337165,1849.108978,7936.428553,0,0.235347:9150.863751,-4709.091564,10290.920932,1,5.807921:-6517.082310,9052.723050,11148.337241,0,2.194755:-7894.037947,2372.760836,8239.910803,0,2.849607:11319.154253,6870.853029,13240.207913,0,0.545559:-4759.088588,-7626.277761,8992.784063,1,4.154482:8892.081597,-5161.616621,10282.946816,1,5.757247:-7588.754038,4463.633010,8806.526797,1,2.609902:9452.112413,7768.146629,12244.032200,1,0.687918:-6872.089699,-4599.321903,8268.405173,1,3.731399:-6715.391902,-3226.081981,7448.965355,1,3.589439:-12340.386671,-1414.468566,12421.526457,0,3.255716:-4728.481251,-7614.948182,8961.115359,1,4.156709:9504.840482,6118.938946,11304.717578,1,0.571984:-9815.821706,-4987.432995,11011.291269,1,3.611700:11300.365271,-137.814895,11299.146704,0,6.270990:-11923.906353,178.577814,11925.457954,0,3.126617:-9199.577348,-8131.947604,12285.245251,0,3.865468:-3418.807682,-7414.958000,8165.693482,0,4.280368:-2302.118485,11122.964473,11357.612504,1,1.774885:11059.387921,4423.660418,11915.986954,1,0.380499:-9316.845856,-5675.488468,10912.271863,0,3.688723:2405.290947,-11930.872233,12170.646685,0,4.911325:9751.095896,-1586.517406,9882.125404,1,6.121897:-10910.590255,5171.940681,12073.075315,1,2.698937:-6854.973261,-4596.365736,8253.287288,1,3.732255:-5033.650941,-6277.462512,8056.015088,0,4.036514:-2285.656530,11177.756821,11414.636000,1,1.772498:-6045.674017,-11415.623327,12908.043249,1,4.225345:7681.228475,1821.534951,7895.926052,0,0.232840:-5037.937369,-6227.172354,8007.135578,0,4.032169:2414.537228,-11948.936550,12190.076794,0,4.911775:-8779.065229,-5799.560932,10525.149431,0,3.725392:-12561.813524,-3977.087907,13174.116894,1,3.448210:5090.186812,-10841.917974,11982.038911,0,5.151333:6352.666307,8682.534530,10761.993132,1,0.939136:5205.935375,-10952.450671,12132.971916,0,5.156100:2868.309546,-8471.944329,8944.452718,0,5.038841:11311.745053,6850.393666,13219.820002,0,0.544527:-6511.754683,6548.636827,9239.192572,1,2.353371:9331.360866,55.389761,9330.382598,1,0.005936:7104.768495,2003.670333,7378.734234,1,0.274879:9462.490723,6104.453194,11266.301837,1,0.572938:-6704.217211,-3227.702842,7436.751108,1,3.590285:-9794.369921,-4994.819303,10992.104554,1,3.613183:-4518.199757,-8692.252213,9795.355536,0,4.233030:-9135.947691,-7983.098312,12126.716898,0,3.859749:-8394.633760,1723.775822,8575.357100,1,2.939065:-8394.337346,1721.390969,8572.729797,1,2.939331:-4073.098346,-6239.228287,7443.486539,0,4.134033:-4070.482356,-5993.908226,7244.559320,0,4.115826:10300.690725,-4806.995961,11365.708906,1,5.846558:909.268169,11713.140563,11755.853864,1,1.493324:1129.085255,12215.200289,12270.707591,1,1.478625:-10669.859561,-3753.247271,11320.327672,0,3.479836:-12561.090722,-3970.170400,13172.172472,1,3.447726:-5024.857120,-6122.447750,7922.494025,0,4.025137:-8405.899381,3219.246503,8994.571589,1,2.775849:-8469.528225,3305.118931,9095.747332,1,2.769531:-9230.364337,-2242.235876,9500.907136,0,3.379896:1134.820156,12221.805883,12280.242349,1,1.478210:914.481142,11725.238992,11768.251584,1,1.492961:1116.465004,12200.064489,12252.145297,1,1.479537:10953.562854,4428.154537,11812.758438,1,0.384179:-8358.748612,3164.218528,8929.031621,1,2.779712:-8457.791583,3281.001457,9071.554531,1,2.771538:8895.768095,-5162.426546,10285.236134,1,5.757359:-4064.934098,-5990.180777,7240.553298,0,4.116171:-7921.782211,2363.739650,8266.135618,0,2.851618:-4352.420354,8758.322285,9772.774673,0,2.031998:-3420.031714,-7416.816525,8164.947818,0,4.280327:862.946546,11668.715023,11691.343602,1,1.496977:9336.861328,7745.789405,12129.506613,1,0.692526:-8780.997286,-5780.983334,10511.835153,0,3.723817:-4059.852303,-6262.805412,7470.497265,0,4.137246:2820.206382,-8429.335024,8883.561954,0,5.035253:-11910.578404,186.525451,11908.965038,0,3.125933:2902.109980,-8491.594036,8981.400954,0,5.041707:6940.615146,8342.407429,10855.907037,1,0.876864:-4517.792732,-8678.836765,9783.354651,0,4.232435:-11924.371804,164.419422,11929.677753,0,3.127805:-6507.422845,6482.572013,9177.826724,1,2.358108:-4518.946609,-8746.612422,9847.073677,0,4.235509:5824.629290,-9639.472329,11263.119656,1,5.255926:-5026.297812,-6145.553192,7943.131858,0,4.026843:7105.189917,-5381.448785,8908.505192,1,5.634967:-4329.143074,8728.185200,9741.616912,0,2.031235:8004.892107,-5902.545618,9944.292649,1,5.647818:4667.240063,4767.149298,6671.494753,0,0.795988:4673.165648,4783.428067,6687.276071,0,0.797057:4957.409476,7009.638961,8585.507969,0,0.955236:4669.380632,4771.138036,6675.842542,1,0.796177:4718.867374,5122.090203,6964.446665,1,0.826349:4339.383281,-9640.403172,10572.020647,1,5.135347:3268.850609,-10355.554267,10859.230565,1,5.018152:4252.999394,-6826.463776,8042.923071,0,5.269561:4338.901133,-9632.280520,10564.416267,0,5.135621:4230.647191,-6520.263843,7772.529591,0,5.287953:4456.866089,-12396.118377,13172.980154,0,5.057535:4130.811697,-10626.642309,11401.277649,0,5.083135:4123.122096,-9038.531512,9934.545169,0,5.140363:7544.635472,2282.718965,7881.228820,0,0.293805:3261.755363,-10388.581540,10893.673068,1,5.016617:3269.069469,-10353.940511,10857.757564,0,5.018216:4525.135703,7226.809197,8526.642029,1,1.011364:2394.953395,7589.746969,7953.901542,0,1.265134:-1899.205728,12738.427219,12873.733625,0,1.718799:4884.803461,6369.726175,8027.123794,0,0.916580:4339.417622,-9641.229234,10572.788017,1,5.135317:4671.169792,4777.889548,6681.920065,1,0.796692:4123.379297,-9038.092580,9934.252580,1,5.140405:4307.405045,-5463.125030,6956.973000,1,5.380048:9938.094465,-1693.538043,10080.653268,1,6.114398:1982.699866,-6548.758898,6841.650048,1,5.006376:4340.512918,-9607.000918,10542.476579,1,5.136745:10637.460322,-2818.212051,11010.435139,1,6.024202:4252.984052,-6826.075284,8042.585226,0,5.269585:4339.085132,-9635.357300,10567.297199,0,5.135517:4230.588914,-6520.125020,7772.381413,0,5.287956:4457.026558,-12393.774716,13170.829035,0,5.057606:3795.791181,5643.938532,6801.622809,1,0.978737:-2347.506308,9007.488106,9307.231859,0,1.825742:4306.692521,-5454.830295,6948.386037,1,5.380706:3269.040552,-10356.057246,10859.767392,0,5.018154:4525.217594,7226.368344,8526.311847,1,1.011328:2408.210420,7524.203257,7898.965514,0,1.261037:4782.459735,-9887.459269,10982.727819,1,5.162903:4786.963913,-9970.563478,11060.160920,1,5.159998:2400.776788,7548.479700,7921.246520,0,1.262865:12403.602249,-3108.125006,12789.917575,1,6.037659:4412.049388,-5080.047085,6728.525707,0,5.427529:4489.136921,-6200.485790,7654.957500,0,5.339040:3521.561750,6258.354003,7181.113562,1,1.058257:4787.440343,-9972.530658,11062.140515,0,5.159960:6469.902907,-4094.067177,7658.846121,1,5.719006:4786.758050,-9968.808629,11058.489866,1,5.160050:6539.050599,-3905.590967,7622.778906,1,5.744774:6338.811545,-7333.140019,9692.288465,1,5.425187:10230.545789,-4733.059397,11272.381331,1,5.849870:4672.671293,4781.960259,6685.880715,0,0.796957:4763.263994,5932.330912,7607.971736,0,0.894270:3616.583933,-7570.717515,8390.199226,1,5.158044:3805.982994,5500.407078,6688.795450,1,0.965496:-111.108912,-11976.981842,11976.709925,1,4.703112:4302.890638,-5513.154478,6996.838851,1,5.375112:4476.156847,-8588.831854,9685.247170,1,5.192821:5868.473399,-7900.928159,9843.743585,1,5.351239:4781.930388,-9952.081568,11041.064463,1,5.160312:5624.787405,-6348.311216,8481.703169,0,5.437431:6397.659022,-9618.243033,11556.511234,1,5.299347:5879.534244,-7897.219047,9845.556947,0,5.352365:5158.696557,-4708.169381,6984.197097,0,5.543416:6524.391025,-3861.190422,7582.500417,1,5.748811:4786.813102,-9969.605393,11059.231952,0,5.160023:-3258.275965,7195.155436,7903.599708,0,1.996012:4115.748227,-8960.326730,9859.331626,1,5.142975:4122.777354,-9037.688909,9933.635484,1,5.140367:-1960.048633,12832.605235,12982.119612,0,1.722365:6327.519461,-7309.411721,9667.776688,1,5.425909:4339.448779,-9639.612435,10571.326483,1,5.135383:8033.887336,-5963.572552,10005.822051,1,5.644629:-6583.395849,9084.075586,11219.945297,0,2.197920:4308.658700,-5590.155154,7057.929898,1,5.369044:4476.850538,-8534.505710,9634.818380,1,5.195490:4475.614567,-8587.627357,9683.928406,1,5.192829:5870.037662,-7861.398025,9811.679135,1,5.353769:10335.096910,-4844.534187,11415.345144,1,5.844852:3613.824140,7023.510239,7898.697424,1,1.095590:-2424.413565,6589.480722,7021.762801,0,1.923347:4307.998244,-5573.721822,7044.517288,0,5.370393:4387.757906,-6824.640356,8113.453977,0,5.283777:4484.859349,-8621.983534,9718.670868,0,5.192039:-6005.341362,-10052.825968,11702.944716,1,4.173899:3911.276840,6485.368630,7573.512579,0,1.028106:-110.676020,-11974.678374,11974.656124,1,4.703147:-4778.802707,-8161.630899,9456.800751,1,4.182684:5823.044682,-9669.453550,11287.434665,0,5.254432:-4715.654589,-10432.022700,11448.428189,1,4.287843:5866.870061,-7862.648305,9810.270266,1,5.353434:7685.628171,1820.323532,7897.570740,0,0.232562:4473.522840,-8546.369685,9644.825381,1,5.194613:4476.303136,-8590.467531,9686.765310,1,5.192756:3613.646324,7025.428834,7900.322149,1,1.095722:5879.840923,-7898.318022,9846.621596,0,5.352324:5158.714201,-4708.146277,6984.194554,0,5.543420:8936.237853,-5222.589367,10351.032984,1,5.754294:5625.006345,-6349.563413,8482.785622,0,5.437353:-1927.171683,12768.491759,12916.686729,0,1.720597:5289.359566,-4397.922082,6878.883867,1,5.589550:5823.304487,-9671.999880,11289.750078,0,5.254335:-3317.436864,12651.109637,13080.291786,0,1.827247:-6512.468540,9047.534425,11143.188153,0,2.194692:-3248.500238,12560.958664,12971.476690,0,1.823870:5880.689727,-7899.962559,9848.447598,1,5.352293:1977.833594,-6557.649619,6849.433608,1,5.005320:-4373.636706,8755.850997,9792.629160,0,2.034052:4404.892882,-6081.734506,7509.365879,1,5.339227:4483.446972,-9205.516693,10239.278995,1,5.165614:5816.302849,-9651.257745,11268.369664,1,5.254753:4307.277360,-5463.629763,6957.290309,1,5.379989:3913.386743,6489.598540,7578.224397,0,1.028156:5290.319575,-4402.497646,6882.547982,1,5.589128:6330.822621,-7317.213617,9674.903373,1,5.425639:-960.405129,-12220.483525,12261.147997,1,4.633960:5861.839730,-7849.136497,9796.433472,0,5.353847:5167.554507,-4748.543480,7017.997204,0,5.540018:11200.660620,6716.652681,13051.899031,0,0.540174:4412.043890,-5079.506514,6728.113979,0,5.427581:4480.657417,-5954.704392,7452.167154,0,5.357461:3520.963127,6253.226180,7176.351371,1,1.057979:4787.012934,-9970.492801,11060.118423,0,5.160005:6443.995642,-9790.449004,11721.565064,1,5.294502:-7190.036781,-9621.494643,12014.652754,1,4.070625:4130.374180,-10628.488209,11402.839667,0,5.083041:4122.760827,-9036.679567,9932.710327,0,5.140408:-6031.974212,-11382.727530,12882.048294,1,4.225090:4669.629529,4771.864779,6676.536033,0,0.796226:4735.390107,5489.232505,7249.523637,0,0.858993:3617.084390,-7565.760047,8385.942080,1,5.158352:-2002.920203,8633.421955,8863.395507,0,1.798760:3268.370734,-10349.445958,10853.261210,1,5.018279:4311.294610,-5470.307457,6965.021528,0,5.379848:4387.585393,-6823.238214,8112.181292,0,5.283853:4286.601991,-5183.509637,6726.345872,0,5.403359:4484.660191,-8621.703656,9718.330668,0,5.192034:-2370.766793,9033.209462,9337.365722,0,1.827458:5879.739599,-7912.135293,9857.944219,1,5.351478:-3261.552302,7205.322141,7908.330178,0,1.995859:4794.989757,-10024.585705,11111.613186,1,5.158545:4787.200633,-9972.273584,11061.805022,1,5.159950:6392.021632,-9551.631543,11491.667428,1,5.302148:5829.026168,-9651.351437,11273.749157,1,5.255715:5822.811877,-9669.135845,11287.042400,0,5.254429:6441.815486,-4036.768846,7601.595177,1,5.723400:7111.160143,-5399.696347,8926.100859,1,5.633742:4400.909362,-5828.401582,7303.305294,1,5.359133:4483.656259,-9206.624105,10240.366246,1,5.165585:4786.680401,-9968.687401,11058.346972,1,5.160048:5817.219259,-9638.943603,11258.565640,1,5.255387:4094.778710,-11137.027221,11865.942356,1,5.064720:4122.721564,-9037.056544,9933.037002,1,5.140388:4334.253607,5994.541951,7397.316239,0,0.944778:4787.072246,-9970.235154,11059.911831,1,5.160020:4301.406079,-5671.412883,7118.076872,1,5.361268:4334.675523,-9620.526722,10551.964097,1,5.135713:4145.210826,12023.389288,12717.887512,0,1.238795:4094.575081,-11139.045329,11867.766257,1,5.064645:4122.801470,-9037.545948,9933.515426,1,5.140375:4334.226606,5997.207626,7399.460763,0,0.944992:3259.898452,-10390.315127,10895.378505,1,5.016407:3268.973410,-10354.436071,10858.201210,1,5.018193:5816.188242,-9651.205327,11268.265613,1,5.254746:-969.184617,-12231.835113,12273.293365,1,4.633320:4786.441279,-9969.092767,11058.608896,1,5.160013:5880.604670,-7899.777054,9848.248006,1,5.352297:3268.849147,-10355.776055,10859.441627,1,5.018145:4307.338970,-5463.398127,6957.146549,1,5.380016:4334.114760,-9615.284004,10546.953931,1,5.135869:4145.077880,12039.027840,12732.629813,0,1.239205:5818.969939,-9659.142980,11276.500089,1,5.254594:5289.953115,-4400.534932,6881.010947,1,5.589313:"

s = trajs.split(":")[0:-1]
for traj in s:
    split = traj.split(",")
    cenx = float(split[0])
    ceny = float(split[1])
    center = (cenx,ceny)
    r = float(split[2])
    dir = int(split[3])
    angle = float(split[4])

    # we should always only draw half of the circle
    angledeg = math.degrees(angle)
    if dir == 1:
        astart = angledeg
        aend = (angledeg + 180) % 360
    else:
        astart = (360 + angledeg - 180) % 360
        aend = angledeg

    r_draw = scale_for_drawing(r)
    center_draw = (scale_for_drawing(center[0]) + origin[0], scale_for_drawing(center[1]) + origin[1])

    # calculate bbox from center and r
    bbox = [(center_draw[0] - r_draw, center_draw[1] - r_draw), (center_draw[0] + r_draw, center_draw[1] + r_draw)]

    canvas.arc(
        bbox, 
        start = astart, 
        end = aend, 
        fill = (0, 255, 0),
        width = 2)


img.show()